@page "/home"
@using InternshipChat.WEB.Pages.Attachments;
@using InternshipChat.WEB.Services.Contracts;
@inject IJSRuntime JS
@inject IImageService _imageService
@inject IDialogService DialogService

<h1>ChatConnect: Revolutionizing Communication</h1>
<h2>Seamless User Experience</h2>
<p>
    ChatConnect is an extraordinary chat application designed to enhance your digital conversations like never before. Packed with cutting-edge features and a sleek, intuitive interface, ChatConnect is poised to redefine the way you connect with others.
</p>
<h2>Privacy and Security at the Core</h2>
<p>
    Your privacy and security are of utmost importance to us. ChatConnect employs state-of-the-art encryption protocols to ensure that your conversations and data remain confidential. You can chat with peace of mind, knowing that your personal information is safeguarded and that your messages are for your eyes only.
</p>

<MudFileUpload T="IBrowserFile" FilesChanged="OpenPreview">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   for="@context">
            Single File
        </MudButton>
    </ButtonTemplate>
    <SelectedTemplate>
        @if (context != null)
        {
            <MudText>@context.Name</MudText>
        }
        else
        {
            <MudText>No File</MudText>
        }
    </SelectedTemplate>
</MudFileUpload>

<MudButton OnClick="LoadPdfToStorage">Load pdf</MudButton>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await JS.InvokeVoidAsync("loadPDF", "#container", "https://chatstoragein1.blob.core.windows.net/attachments-container/sample.pdf?sp=r&st=2023-06-09T06:35:18Z&se=2023-06-09T14:35:18Z&spr=https&sv=2022-11-02&sr=b&sig=1n4pc1fAJAB9uPGs%2F1D9MfUKbSxQa8%2Bqt8%2Fd0DOSyyk%3D");
        }
    }

    public async Task OpenPreview(IBrowserFile file)
    {
        var dialogParameter = new DialogParameters
            {
                ["PdfDocument"] = file
            };
        var dialogResult = await DialogService.Show<AttachmentPreviewModal>("Attachment", dialogParameter).Result;
        if (!dialogResult.Canceled)
        {
            var editedDocumentBase64 = dialogResult.Data as string ?? null;
        }
    }

    public async Task LoadPdfToStorage()
    {
        var base64result = await JS.InvokeAsync<string>("exportPDF");
        if (base64result != null)
        {
           //var blobUri = await _imageService.UploadPdf(base64result);
        }
    }
}
