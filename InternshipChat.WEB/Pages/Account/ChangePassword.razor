@page "/change"
@namespace InternshipChat.WEB
@using InternshipChat.Shared.Models
@using Services.Contracts
@using System.Security.Claims;
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthState

<h1>Change Password</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>Error</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="changeModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="current-password">Current Password</label>
                <InputText Id="current-password" Class="form-control" @bind-Value="changeModel.CurrentPassword" />
                <ValidationMessage For="@(() => changeModel.CurrentPassword)" />
            </div>
            <div class="form-group">
                <label for="new-password">Password</label>
                <InputText Id="new-password" type="password" Class="form-control" @bind-Value="changeModel.NewPassword" />
                <ValidationMessage For="@(() => changeModel.NewPassword)" />
            </div>
            <div class="form-group">
                <label for="confirm-password">Confirm Password</label>
                <InputText Id="confirm-password" type="password" class="form-control" @bind-Value="changeModel.ConfirmNewPassword" />
                <ValidationMessage For="@(() => changeModel.ConfirmNewPassword)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

@code {
    private ChangePasswordModel changeModel = new ChangePasswordModel();
    private bool ShowErrors;
    private IEnumerable<string>? Errors;
    private string? UserEmail { get; set; }

    private async Task HandleLogin()
    {
        ShowErrors = false;
        var authState = await AuthState.GetAuthenticationStateAsync();
        changeModel.Email = authState.User.Identity.Name;
        var result = await AuthService.ChangePassword(changeModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Errors = result.Errors;
            ShowErrors = true;
        }
    }
}