@using InternshipChat.WEB.Services.Contracts;
@using InternshipChat.WEB.StateContainers;
@using Microsoft.AspNetCore.SignalR.Client;

@inject AuthenticationStateProvider AuthState
@inject IConfiguration Configuration
@inject IAuthService AuthService
@implements IDisposable

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Rounded.Call" Class="mr-3 mb-1"></MudIcon>
            Call in progress
        </MudText>
    </TitleContent>
    <DialogContent>
        <h5>My local video</h5>
        <div style="height: 350px; width: 470px;">
            <video id="local-video" autoplay style="width: 100%; height: 100%;"></video>
        </div>
        <h5>Remote video</h5>
        <div style="height: 350px; width: 470px;">
            <video id="remote-video" autoplay style="width: 100%; height: 100%;"></video>
        </div>
    </DialogContent>
    <DialogActions>
        <div class="d-flex align-items-center justify-content-center">
            <MudButton Color="Color.Error" OnClick="HangUp">Hang Up</MudButton>
        </div>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [CascadingParameter] public HubConnection hubConnection { get; set; }
    [Parameter] public string receiver { get; set; } = string.Empty;
    private List<IDisposable> subscriptions = new();

    public string CurrentUserName { get; set; }
    public string MyPeerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MyPeerId = await _jsRuntime.InvokeAsync<string>("createPeer");
        await DefineUser();
        await OpenHubConnection();
        await _jsRuntime.InvokeVoidAsync("startLocalStream");
        SubscribeToHubSignals();

        if (!string.IsNullOrEmpty(receiver))
        {
            await hubConnection.SendAsync("AcceptCall", CurrentUserName, MyPeerId);
        }
    }

    private async Task OpenHubConnection()
    {
        if (hubConnection == null)
        {
            var url = Configuration["AppBase"] + "chathub";
            hubConnection = new HubConnectionBuilder().WithUrl(url, options =>
            {
                options.AccessTokenProvider = async () => await AuthService.GetTokenAsync();
            }).Build();
        }

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
    }

    private IDisposable SubscribeToAcceptance()
    {
        return hubConnection.On<string, string>("ReceiveAcceptCall", async (string acceptedUserName, string acceptedPeerId) =>
        {
            if (acceptedUserName != CurrentUserName)
            {
                await _jsRuntime.InvokeVoidAsync("connectNewUser", acceptedPeerId);
            }
        });
    }

    private IDisposable SubscribeToEndCall()
    {
        return hubConnection.On("ReceiveEndCall", async () =>
        {
            MudDialog.Close(DialogResult.Ok(true));
            await _jsRuntime.InvokeVoidAsync("destroyConnection");
        });
    }


    private async Task HangUp()
    {
        await hubConnection.SendAsync("EndCall");
    }

    private void SubscribeToHubSignals()
    {
        subscriptions.Add(SubscribeToAcceptance());
        subscriptions.Add(SubscribeToEndCall());
    }

    private async Task DefineUser()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        CurrentUserName = authState.User.Identity!.Name!;
    }

    public void Dispose()
    {
        subscriptions.ForEach(s => s.Dispose());
        InvokeAsync(async () =>
        {
            if (hubConnection != null)
            {
                await hubConnection.StopAsync();
            }
        });
    }
}
