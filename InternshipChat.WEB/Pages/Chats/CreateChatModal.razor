@using InternshipChat.DAL.Entities;
@using InternshipChat.Shared.DTO.ChatDtos;
@using InternshipChat.Shared.DTO.UserDtos;
@using InternshipChat.WEB.Services.Contracts;
@inject IChatService ChatService
@inject IUserService UsersService

<MudDialog Style="width: 650px">
    <DialogContent>
        <MudTextField @bind-Value="@chat.Name" Label="Name" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContactPage"></MudTextField>
        <MudTextField @bind-Value="@chat.Description" Label="Description" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Description"></MudTextField>
        <MudSelect Label="Add users" MultiSelection="true" T="UserDTO" @bind-Value="value" @bind-SelectedValues="selectedUsers" AdornmentIcon="@Icons.Material.Filled.People">
            @foreach (var u in users)
            {
                <MudSelectItem Value="@u">@u.FirstName</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private CreateChatDTO chat = new CreateChatDTO();
    private UserDTO value { get; set; }
    private IEnumerable<UserDTO> users = new List<UserDTO>();
    private IEnumerable<UserDTO> selectedUsers = new List<UserDTO>();

    protected override async Task OnInitializedAsync()
    {
        var response = await UsersService.GetUsersAsync("");
        users = response.Items;
    }

    async void Submit()
    {
        chat.UserIds = GetSelectedUsersIds();
        await ChatService.CreateChat(chat);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private List<int> GetSelectedUsersIds()
    {
        return selectedUsers.Select(u => u.Id).ToList();
    }

    void Cancel() => MudDialog.Cancel();
}
