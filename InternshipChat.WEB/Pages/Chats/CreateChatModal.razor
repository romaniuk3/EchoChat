@using InternshipChat.DAL.Entities;
@using InternshipChat.Shared.DTO.ChatDtos;
@using InternshipChat.WEB.Services.Contracts;
@inject IChatService ChatService
@inject IUserService UsersService

<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="@chat.Name" Label="Name"></MudTextField>
        <MudTextField @bind-Value="@chat.Description" Label="Description"></MudTextField>
        <MudSelect Label="Add users" MultiSelection="true" @bind-SelectedValues="selectedUserIds">
            @foreach (var u in users)
            {
                <MudSelectItem Value="@u.Id">@u.FirstName</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private ChatDTO chat = new ChatDTO();
    private IEnumerable<User> users = new List<User>();
    private IEnumerable<int> selectedUserIds = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        var response = await UsersService.GetUsersAsync("");
        users = response.Items;
    }

    async void Submit()
    {
        chat.UserIds = selectedUserIds.ToList();
        await ChatService.CreateChat(chat);
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}
