@using InternshipChat.Shared.DTO.ChatDtos;
@using InternshipChat.Shared.DTO.UserDtos;
@using InternshipChat.WEB.Services.Contracts;
@inject IChatService ChatService
@inject IUserService UsersService
@inject AuthenticationStateProvider AuthState

<MudDialog Style="width: 650px">
    <DialogContent>
        @if(Error != null)
        {
            <MudText Color="Color.Error">@Error</MudText>
        }
        <MudTextField @bind-Value="@chat.Name" Label="Name" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContactPage"></MudTextField>
        <MudTextField @bind-Value="@chat.Description" Label="Description" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Description"></MudTextField>
        <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(ShowSelectedUsers))" Label="Add users" MultiSelection="true" T="UserDTO" @bind-Value="value" @bind-SelectedValues="selectedUsers" AdornmentIcon="@Icons.Material.Filled.People">
            @foreach (var u in users)
            {
                <MudSelectItem T="UserDTO" Value="@u">@u.FirstName</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private CreateChatDTO chat = new CreateChatDTO();
    private UserDTO value { get; set; }
    private IEnumerable<UserDTO> users = new List<UserDTO>();
    private IEnumerable<UserDTO> selectedUsers = new List<UserDTO>();
    private int CurrentUserId { get; set; }
    private string? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await UsersService.GetUsersAsync("");
        users = await UsersExceptCurrentUser(response.Items);
        SetCurrentUserId();
    }

    private async Task<List<UserDTO>> UsersExceptCurrentUser(List<UserDTO> users)
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var userName = authState.User.Identity!.Name!;
        return users.Where(u => u.UserName != userName).ToList();
    }

    private string ShowSelectedUsers(List<string> selectedValues)
    {
        return string.Join(", ", selectedUsers.Select(u => u.FirstName));
    }

    private async void SetCurrentUserId()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst("id");
        int.TryParse(userIdClaim.Value, out int userId);
        CurrentUserId = userId;
    }

    async void Submit()
    {
        chat.UserIds = GetSelectedUsersIds();
        var response = await ChatService.CreateChat(chat);
        if (response.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(true));
        } else
        {
            var error = await response.Content.ReadAsStringAsync();
            Error = error;
            StateHasChanged();
        }
    }

    private List<int> GetSelectedUsersIds()
    {
        var selected = selectedUsers.Select(u => u.Id).ToList();
        selected.Add(CurrentUserId);
        return selected;
    }

    void Cancel() => MudDialog.Cancel();
}
