@page "/chats/{Id:int}"
@using InternshipChat.Shared.DTO.ChatDtos;
@using InternshipChat.Shared.DTO.UserDtos;
@using InternshipChat.WEB.Services.Contracts;
@using Microsoft.AspNetCore.SignalR.Client;
@using InternshipChat.WEB.Pages.Attachments;
@inject IChatService chatService
@inject IAuthService AuthService
@inject IMessageService messageService
@inject IUserService userService
@inject IConfiguration Configuration
@inject IImageService _imageService
@inject AuthenticationStateProvider AuthState
@implements IDisposable

@if (!IsPageLoaded)
{
    <div class="spinner-container">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
} else
{
    
@if (IsAccessGranted)
{
<div class="d-flex flex-grow-1 flex-row">
    <MudPaper Elevation="25" Class="py-4 flex-grow-1">
        <MudToolBar Dense="true">
                <MudIcon Icon="@Icons.Material.Outlined.ChatBubble" Style="margin-right:10px"></MudIcon>
                <MudText Typo="Typo.h6">@OpenedChat.Name</MudText>
        </MudToolBar>
        <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">
            @foreach (var message in messages)
            {
                <div class="d-flex flex-row my-4 @(CurrentUserId == message.UserId ? "align-self-end" : "align-self-start")">
                    <MudAvatar Style="margin: 6px 10px 0 0;"><MudImage Src="@message.User.Avatar"></MudImage></MudAvatar>
                    <div>
                        <MudText Typo="Typo.body1">@message.User.Email</MudText>
                        <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.CreatedDate.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                        <MudText Typo="Typo.body2" Style=" padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">@message.MessageContent</MudText>
                    </div>
                </div>
            }
        </div>
        <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
            <MudTextField T="string" Placeholder="Enter your message..." DisableUnderLine="true" Class="mt-n2 mx-4"
                            @bind-Value="CurrentMessage" For="@(()=> CurrentMessage)" />
            <MudButton OnClick="@SendMessageAsync" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Primary" ButtonType="ButtonType.Button">Send</MudButton>
        </MudPaper>
    </MudPaper>
    <MudPaper Elevation="25" Class="py-4 flex-grow-1" MaxWidth="600px">
        <MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Attachments">
                <AllAttachmentsTab ChatId="Id" CurrentUserId="CurrentUserId" attachments="attachments" OnDeleteAttachment="@HandleDeleteAttachment" OnDocumentUploaded="@NotifyUser"></AllAttachmentsTab>
            </MudTabPanel>
            <MudTabPanel Text="Signatures">
                 <SignatureAttachmentsTab SignatureAttachments="SignatureAttachments" 
                     OnDeleteAttachment="@HandleDeleteAttachment" OnShowCompletedPressed="@HandleShowCompleted" CurrentUserId="CurrentUserId"></SignatureAttachmentsTab>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
</div>

} else
{
    <MudPaper Elevation="25" Style="height: 75vh;" Class="d-flex align-center justify-content-center">
        <MudButton OnClick="@JoinToChat" Class="align-self-center" Color="Color.Primary" ButtonType="ButtonType.Button">Join chat</MudButton>
    </MudPaper>
}
    @if(Error != null)
    {
        <MudText Color="Color.Error">@Error</MudText>
    }
}

@code {
    [Parameter] public int Id { get; set; }
    public HubConnection hubConnection { get; set; }
    private string CurrentMessage { get; set; }
    private ChatDTO OpenedChat { get; set; } = new();
    private List<MessageDTO> messages { get; set; } = new();
    private int CurrentUserId { get; set; }
    private UserDTO User { get; set; }
    private bool IsAccessGranted { get; set; }
    private bool IsPageLoaded { get; set; }
    private string? Error { get; set; }
    private IDisposable MessageSubscription { get; set; }
    private List<ChatAttachmentDTO> attachments = new();
    private List<ChatAttachmentDTO> SignatureAttachments = new();

    protected async override Task OnInitializedAsync()
    {
        await DefineChatUser();
        await LoadChat();
        CheckIfUserHasAccessToChat();
        if (IsAccessGranted) LoadChatItems();
        if (hubConnection == null)
        {
            var url = Configuration["AppBase"] + "chathub";
            hubConnection = new HubConnectionBuilder().WithUrl(url, options =>
            {
                options.AccessTokenProvider = async () => await AuthService.GetTokenAsync();
            }).Build();
        }

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }

        MessageSubscription = hubConnection.On<MessageDTO, string>("ReceiveMessage", async (message, userName) =>
        {
            if (message.ChatId == Id)
            {
                messages.Add(message);
                StateHasChanged();
                await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
            }
        });
    }

    private async Task LoadChat()
    {
        OpenedChat = await chatService.GetChatById(Id);
    }

    private async void LoadChatItems()
    {
        messages = await messageService.GetMessagesAsync(Id);
        await LoadAttachments();
    }

    private async Task LoadAttachments()
    {
        attachments = await chatService.GetChatAttachments(Id);
        var signatureAttachments = await chatService.GetUserSignatureAttachments(Id, CurrentUserId);
        SignatureAttachments = signatureAttachments.Where(sa => sa.RequiresSignature == true).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private async Task NotifyUser(int notificationReceiverId = 0)
    {
        await LoadAttachments();

        if (notificationReceiverId != 0)
        {
            var user = await userService.GetUserAsync(notificationReceiverId);
            if (user != null)
            {
                await hubConnection.SendAsync("NotifyAboutAttachment", user.UserName, Id);
            }
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsAccessGranted)
        {
            await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
        }
    }

    private async Task JoinToChat() 
    {
        var response = await chatService.AddUserToChat(Id, CurrentUserId);
        if (response.IsSuccessStatusCode)
        {
            IsAccessGranted = true;
            LoadChatItems();
            StateHasChanged();
        }
        else
        {
            Error = await response.Content.ReadAsStringAsync();
        }
    }

    private async Task SendMessageAsync()
    {
        if (!string.IsNullOrEmpty(CurrentMessage))
        {
            var msg = new MessageDTO()
                {
                    UserId = CurrentUserId,
                    ChatId = Id,
                    User = this.User,
                    MessageContent = CurrentMessage
                };

            var authState = await AuthState.GetAuthenticationStateAsync();
            var userIdClaim = authState.User.FindFirst("id");
            var senderId = int.TryParse(userIdClaim.Value, out int userId);
            if (senderId)
            {
                await messageService.SaveMessageAsync(msg);
                await hubConnection.SendAsync("SendMessageAsync", msg, authState.User!.Identity!.Name);
                CurrentMessage = string.Empty;
            }

        }
    }

    private async Task DefineChatUser()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst("id");
        var senderId = int.TryParse(userIdClaim.Value, out int userId);
        if (senderId)
        {
            CurrentUserId = userId;
        }
        User = await userService.GetUserAsync(userId);
        IsPageLoaded = true;
    }

    public async Task HandleShowCompleted(bool showCompleted)
    {
        SignatureAttachments = await chatService.GetUserSignatureAttachments(Id, CurrentUserId);

        if (!showCompleted)
        {
            SignatureAttachments = SignatureAttachments.Where(sa => sa.RequiresSignature == true).ToList();
        }
    }

    public async Task HandleDeleteAttachment(int attachmentId)
    {
        await _imageService.DeleteAttachment(attachmentId);
        await LoadAttachments();
    }

    public void CheckIfUserHasAccessToChat()
    {
        IsAccessGranted = OpenedChat.Users.Any(user => user.Id == CurrentUserId);
    }

    public void Dispose()
    {
        MessageSubscription.Dispose();
        InvokeAsync(async () =>
        {
            if (hubConnection != null)
            {
                await hubConnection.StopAsync();
            }
        });
    }
}
