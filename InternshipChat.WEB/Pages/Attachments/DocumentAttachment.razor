@using InternshipChat.DAL.Entities;
@using InternshipChat.Shared.DTO.ChatDtos;
@using InternshipChat.WEB.Services.Contracts;
@inject IImageService _imageService
@inject ISnackbar Snackbar

<MudStack Style="width: 100%;">
    <MudFileUpload T="IBrowserFile" Accept=".docx" FilesChanged="AddFile" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
    @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="100px" Outlined="true" Class="@DragClass">
                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                @if(document != null)
                {
                    <MudChip Color="Color.Dark" Text="@document.Name" />
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
        <div class="d-flex justify-content-evenly">
            <MudButton OnClick="UploadDocument" Disabled="@(document == null)" Color="Color.Success" Variant="Variant.Filled">Upload</MudButton>
            <MudButton OnClick="Clear" Disabled="@(document == null)" Color="Color.Warning" Variant="Variant.Filled">Clear</MudButton>
        </div>
</MudStack>

@code {
    [Parameter] public int ChatId { get; set; }
    [Parameter] public int UserId { get; set; }
    [Parameter] public EventCallback<ChatAttachment> OnAttachmentProcessed { get; set; }

    private IBrowserFile? document;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10 text-center";
    private string DragClass = DefaultDragClass;

    private void AddFile(IBrowserFile file)
    {
        ClearDragClass();
        if (file.ContentType != "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
        {
            Snackbar.Add("You can upload only .docx file.", Severity.Error);
        } else {
            document = file;
        }
    }

    private async Task UploadDocument()
    {
        if (document != null)
        {
            var attachmentDto = new ChatAttachmentDTO
                {
                    ChatId = ChatId,
                    SenderId = UserId,
                    FileName = document.Name,
                    Document = document
                };
            var attachmentResult = await _imageService.UploadAttachment(attachmentDto);
            if (attachmentResult != null)
            {
                await OnAttachmentProcessed.InvokeAsync(attachmentResult);
            }
        }
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
        StateHasChanged();
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    private async Task Clear()
    {
        document = null;
        ClearDragClass();
        await Task.Delay(100);
        StateHasChanged();
    }

    private async Task<IFormFile> ConvertToFormFile(IBrowserFile file)
    {
        using (var stream = file.OpenReadStream())
        {
            return new FormFile(stream, 0, file.Size, file.Name, file.Name);
        }
    }
}
