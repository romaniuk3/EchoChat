@using InternshipChat.DAL.Entities;
@using InternshipChat.Shared.DTO.ChatDtos;
@using InternshipChat.Shared.DTO.UserDtos;
@using InternshipChat.WEB.Services.Contracts;
@inject IImageService _imageService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IUserService UsersService
@inject AuthenticationStateProvider AuthState

<MudStack Style="width: 100%;">
    <MudFileUpload T="IBrowserFile" Accept=".docx" FilesChanged="AddFile" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
    @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="100px" Outlined="true" Class="@DragClass">
                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                @if(document != null)
                {
                    <MudChip Color="Color.Dark" Text="@document.Name" />
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
        <div class="d-flex justify-content-evenly">
            <MudButton OnClick="UploadDocument" Disabled="@(document == null || (document.ContentType == "application/pdf" && selectedUser == null))" Color="Color.Success" Variant="Variant.Filled">Upload</MudButton>
            <MudButton OnClick="Clear" Disabled="@(document == null)" Color="Color.Warning" Variant="Variant.Filled">Clear</MudButton>
        </div>
        @if (document != null && document.ContentType == "application/pdf")
        {
            <MudSelect Margin="Margin.Dense" T="UserDTO" Label="Receiver" Variant="Variant.Text" @bind-Value="selectedUser">
                @foreach (var u in users)
                {
                    <MudSelectItem T="UserDTO" Value="@u">@u.FirstName</MudSelectItem>
                }
            </MudSelect>
        }
</MudStack>

@code {
    [Parameter] public int ChatId { get; set; }
    [Parameter] public int UserId { get; set; }
    [Parameter] public EventCallback<ChatAttachment> OnAttachmentProcessed { get; set; }

    private IBrowserFile? document;
    private string? editedDocumentBase64;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10 text-center";
    private string DragClass = DefaultDragClass;
    private IEnumerable<UserDTO> users = new List<UserDTO>();
    private UserDTO? selectedUser;

    private async Task AddFile(IBrowserFile file)
    {
        ClearDragClass();
        if (file.ContentType != "application/vnd.openxmlformats-officedocument.wordprocessingml.document" && file.ContentType != "application/pdf")
        {
            Snackbar.Add("You can upload only .docx and .pdf files.", Severity.Error);
        } else {
            document = file;
        }

        if(file.ContentType == "application/pdf")
        {
            await ShowPdfPreview(file);
        }
    }

    private async Task UploadDocument()
    {
        if (document != null)
        {
            var attachmentDto = new ChatAttachmentDTO
                {
                    ChatId = ChatId,
                    SenderId = UserId,
                    FileName = document.Name,
                    Document = document
                };

            if (editedDocumentBase64 != null && selectedUser != null)
            {
                attachmentDto.RequiresSignature = true;
                attachmentDto.ReceiverId = selectedUser.Id;
                var pdfResult = await _imageService.UploadPdf(attachmentDto, editedDocumentBase64);
                await OnAttachmentProcessed.InvokeAsync(pdfResult);
            } else
            {
                var attachmentResult = await _imageService.UploadAttachment(attachmentDto);
                if (attachmentResult != null)
                {
                    await OnAttachmentProcessed.InvokeAsync(attachmentResult);
                }
            }

            await Clear();
        }
    }

    public async Task ShowPdfPreview(IBrowserFile file)
    {
        var dialogParameter = new DialogParameters
            {
                ["PdfDocument"] = file
            };
        var dialogResult = await DialogService.Show<AttachmentPreviewModal>("Attachment", dialogParameter).Result;
        if (!dialogResult.Canceled)
        {
            editedDocumentBase64 = dialogResult.Data as string ?? null;
        }

        var response = await UsersService.GetUsersAsync("");
        users = await UsersExceptCurrentUser(response.Items);
    }

    private async Task<List<UserDTO>> UsersExceptCurrentUser(List<UserDTO> users)
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var userName = authState.User.Identity!.Name!;
        return users.Where(u => u.UserName != userName).ToList();
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
        StateHasChanged();
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    private async Task Clear()
    {
        document = null;
        editedDocumentBase64 = null;
        ClearDragClass();
        await Task.Delay(100);
        StateHasChanged();
    }

    private async Task<IFormFile> ConvertToFormFile(IBrowserFile file)
    {
        using (var stream = file.OpenReadStream())
        {
            return new FormFile(stream, 0, file.Size, file.Name, file.Name);
        }
    }
}
