@page "/"
@using InternshipChat.DAL.Entities;
@using InternshipChat.WEB.Services.Contracts;
@using Microsoft.AspNetCore.SignalR.Client;
@inject InternshipChat.WEB.Services.Contracts.IMessageService messageService;
@inject IConfiguration Configuration

<PageTitle>Index</PageTitle>

<div>
    <h4>My peer id @MyPeerId</h4>
</div>

<div class="form-group">
    <label>
        User:
        <input @bind="RemoteUserPeerId" />
    </label>
</div>
<button @onclick="Connect">Call user</button>


<div video-grid id="my-video-grid">

</div>

<h2></h2>

@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    private string RemoteUserPeerId { get; set; }
    private string MyPeerId { get; set; }

    
    private async Task Connect()
        {
        await hubConnection.SendAsync("JoinRoom", MyPeerId);
    }

    /*
    private async Task Call()
    {
        await hubConnection.SendAsync("Call", MyPeerId, RemoteUserPeerId);
    }
    */
    protected override async Task OnInitializedAsync()
    {
        MyPeerId = await _jsRuntime.InvokeAsync<string>("createPeer");
        await OpenHubConnection();
        SubscribeOnHubSignals();
        await hubConnection.SendAsync("JoinToRoom", MyPeerId);

        await _jsRuntime.InvokeVoidAsync("startLocalStream");

    }

    private async Task OnReceiveUserConnected(string id)
    {
        if (id != MyPeerId)
        {
            await _jsRuntime.InvokeVoidAsync("connectNewUser", RemoteUserPeerId);
        }
    }

    private async Task OnReceiveUserDisconnected(string id)
    {
        await _jsRuntime.InvokeVoidAsync("disconnectUser", id);
    }

    private async Task OnReceiveCall(string callerId)
    {
        Console.WriteLine("CALLER ID ", callerId);
    }

    private void SubscribeOnHubSignals()
    {
        hubConnection.On<string>("user-connected", this.OnReceiveUserConnected);
        hubConnection.On<string>("user-disconnected", this.OnReceiveUserDisconnected);
        //hubConnection.On<string>("ReceiveCall", this.OnReceiveCall);
    }

    private async Task OpenHubConnection()
    {
        if (hubConnection == null)
        {
            var url = Configuration["AppBase"] + "chathub";
            hubConnection = new HubConnectionBuilder().WithUrl(url).Build();
        }

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
    }
}
