@page "/test"
@using InternshipChat.DAL.Entities;
@using InternshipChat.WEB.Enums;
@using InternshipChat.WEB.Services.Contracts;
@using Microsoft.AspNetCore.SignalR.Client;
@inject InternshipChat.WEB.Services.Contracts.IMessageService messageService;
@inject IConfiguration Configuration
@inject AuthenticationStateProvider AuthState

<PageTitle>Index</PageTitle>

<div>
    <h4>My peer id @MyPeerId</h4>
    <h4>My userName @CurrentUserName</h4>
</div>
<div class="form-group">
    <label>
        User:
        <input @bind="RemoteUserName" />
    </label>
</div>
@{
    switch (UserCallState)
    {
        case CallState.None:
            <button @onclick="Call">Call user</button>
            break;
        case CallState.Incoming:
            <button @onclick="AcceptCall">Accept call</button>
            break;
    }
}

<div video-grid id="my-video-grid">

</div>

<h2></h2>

@code {
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    private string RemoteUserName { get; set; }
    private string MyPeerId { get; set; }
    private string CurrentUserName { get; set; }
    private CallState UserCallState = CallState.None;

    /*
    private async Task Connect()
        {
        await hubConnection.SendAsync("JoinRoom", MyPeerId);
    }*/

    private async Task Call()
    {
        if (CurrentUserName != RemoteUserName)
        {
            await _jsRuntime.InvokeVoidAsync("startLocalStream");
            await hubConnection.SendAsync("Call", CurrentUserName, RemoteUserName);
        }
    }

    private async Task AcceptCall()
    {
        await _jsRuntime.InvokeVoidAsync("startLocalStream");
        await hubConnection.SendAsync("AcceptCall", CurrentUserName, MyPeerId);
    }

    protected override async Task OnInitializedAsync()
    {
        MyPeerId = await _jsRuntime.InvokeAsync<string>("createPeer");
        await DefineCurrentUser();
        await OpenHubConnection();
        SubscribeOnHubSignals();

        //await _jsRuntime.InvokeVoidAsync("startLocalStream");

    }

    private async Task DefineCurrentUser()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        CurrentUserName = authState.User.Identity!.Name!;
    }

    /*
    private async Task OnReceiveUserConnected(string id)
            {
            if (id != MyPeerId)
            {
            await _jsRuntime.InvokeVoidAsync("connectNewUser", RemoteUserPeerId);
    }
    }*/

    /*
    private async Task OnReceiveUserDisconnected(string id)
        {
        await _jsRuntime.InvokeVoidAsync("disconnectUser", id);
    }*/

    private async Task OnReceiveCallOffer(string callerUserName, string receiverUserName)
    {
        if (CurrentUserName == receiverUserName)
        {
            Console.WriteLine(callerUserName + " Is trying to call you");
            UserCallState = CallState.Incoming;
            StateHasChanged();
            //await _jsRuntime.InvokeVoidAsync("connectNewUser", callerPeer);
        }
    }

    private async Task OnReceiveAcceptance(string acceptedUserName, string acceptedPeerId)
    {
        if (acceptedUserName != CurrentUserName)
        {
            await _jsRuntime.InvokeVoidAsync("connectNewUser", acceptedPeerId);
        }
    }

    private void SubscribeOnHubSignals()
    {
        //hubConnection.On<string>("user-connected", this.OnReceiveUserConnected);
        //hubConnection.On<string>("user-disconnected", this.OnReceiveUserDisconnected);
        hubConnection.On<string, string>("ReceiveCallOffer", this.OnReceiveCallOffer);
        hubConnection.On<string, string>("ReceiveAcceptCall", this.OnReceiveAcceptance);
    }

    private async Task OpenHubConnection()
    {
        if (hubConnection == null)
        {
            var url = Configuration["AppBase"] + "chathub";
            hubConnection = new HubConnectionBuilder().WithUrl(url).Build();
        }

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
    }
}
