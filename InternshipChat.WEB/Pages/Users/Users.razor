@page "/users"
@using InternshipChat.DAL.Entities
@using InternshipChat.Shared.Models;
@using InternshipChat.WEB.Services.Contracts
@using MudBlazor;
@inject IUserService userService

<h3>Users</h3>

<MudTable ServerData="@(new Func<TableState, Task<TableData<User>>>(GetServerData))"
          Dense="false" Hover="true" @ref="table">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField OnDebounceIntervalElapsed="OnSearch" DebounceInterval="500" T="string" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="email" T="User">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="firstName" T="User">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="lastName" T="User">Last Name</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="@_pageSizeOption"/>
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<User> users;
    private MudTable<User> table;
    private UserParameters _userParameters = new UserParameters();
    private readonly int[] _pageSizeOption = { 4, 6, 10 };

    private int totalItems;
    private string searchString;

    private async Task<TableData<User>> GetServerData(TableState state)
    {
        _userParameters.PageSize = state.PageSize;
        _userParameters.PageNumber = state.Page + 1;
        _userParameters.OrderBy = state.SortDirection == SortDirection.Descending ?
            state.SortLabel + " desc" :
            state.SortLabel;

        var response = await userService.GetUsersAsync(_userParameters);

        return new TableData<User>()
            {
                Items = response.Items,
                TotalItems = response.TotalCount
            };
    }

    private void OnSearch(string searchTerm)
    {
        _userParameters.SearchTerm = searchTerm;
        table.ReloadServerData();
    }
}
