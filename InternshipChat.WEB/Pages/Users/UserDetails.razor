@page "/users/{UserId:int}"

@using InternshipChat.DAL.Entities
@using InternshipChat.Shared.Models;
@using InternshipChat.Shared.DTO.UserDtos;
@using InternshipChat.WEB.Services.Contracts
@using MudBlazor;
@using InternshipChat.WEB.Helpers;
@inject IUserService userService
@inject AuthenticationStateProvider AuthState
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IImageService imageService

<div class="d-flex align-items-center">
    <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" OnClick="@NavigateBack"></MudIconButton>
    <h3 class="m-0">User Details</h3>
</div>

<MudGrid>
    <MudItem md="12" sm="12" Class="d-flex align-items-end">
        <MudInputLabel Class="mr-2 details-label">Email:</MudInputLabel>
        <MudTextField Disabled="@(!CanEdit)" @bind-Value="@UpdateDTO.Email" />
    </MudItem>
    <MudItem md="12" sm="12" Class="d-flex align-items-end">
        <MudInputLabel Class="mr-2 details-label">First name:</MudInputLabel>
        <MudTextField Disabled="@(!CanEdit)" @bind-Value="@UpdateDTO.FirstName" />
    </MudItem>
    <MudItem md="12" sm="12" Class="d-flex align-items-end">
        <MudInputLabel Class="mr-2 details-label">Last name:</MudInputLabel>
        <MudTextField Disabled="@(!CanEdit)" @bind-Value="@UpdateDTO.LastName" />
    </MudItem>
    @if (CanEdit)
    {
        <MudFileUpload T="IFormFile" FilesChanged="UploadImage">
            <ButtonTemplate Context="image">
                <MudFab HtmlTag="label"
                    Color="Color.Secondary"
                    StartIcon="@Icons.Material.Filled.Image"
                    Label="Load picture"
                        for="@image" />
            </ButtonTemplate>
        </MudFileUpload>
        <img src="@UpdateDTO.Avatar"/>
        <MudButton Class="ml-2 m-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="@UpdateUser">Save</MudButton>
    }
</MudGrid>

@code {
    public UpdateUserDTO UpdateDTO { get; set; } = new UpdateUserDTO();

    [Parameter]
    public int UserId { get; set; }
    private bool CanEdit { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = await userService.GetUserAsync(UserId);
        //TODO: Refactor
        UpdateDTO.Email = user.Email;
        UpdateDTO.FirstName = user.FirstName;
        UpdateDTO.LastName = user.LastName;
        UpdateDTO.Avatar = user.Avatar;
        await SetEditParameters(user);
    }

    private async void UpdateUser()
    {
        await userService.UpdateUserAsync(UserId, UpdateDTO);
        Snackbar.Add("Success", Severity.Success);
        NavigateBack();
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("javascript:history.back()");
    }

    private async Task SetEditParameters(UserDTO chosenUser)
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var userName = authState.User.Identity.Name;
        if (userName == chosenUser.UserName)
        {
            CanEdit = true;
        }
    }

    private async Task UploadImage(IFormFile image)
    {
        UpdateDTO.AvatarImage = image;
    }
}
