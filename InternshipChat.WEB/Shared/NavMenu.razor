@inject IJSRuntime JS
@inject NavigationManager navManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">InternshipChat.WEB</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="home" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <AuthorizeView>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="chats">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Chats
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="users">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Users
                </NavLink>
            </div>
            @if (!isOnline)
            {
                <lottie-player style="max-width:300px" src="lottie/CatsLottieAnimations/(7).json" speed="1" loop autoplay></lottie-player>
            }
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool isOnline = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RegisterForOnlineStatusChanged();
        }
    }

    private async Task RegisterForOnlineStatusChanged()
    {
        await JS.InvokeAsync<object>(
            identifier: "registerForOnlineStatusChanged",
            DotNetObjectReference.Create(this),
            nameof(ConnectionStatusChanged)
        );
    }

    [JSInvokable(nameof(ConnectionStatusChanged))]
    public Task ConnectionStatusChanged(bool isOnline)
    {
        this.isOnline = isOnline;
        StateHasChanged();

        return Task.CompletedTask;
    }
}
