@inherits LayoutComponentBase
@using InternshipChat.WEB.Enums;
@using InternshipChat.WEB.Pages.VideoCall;
@using InternshipChat.WEB.StateContainers;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation;
@inject IConfiguration Configuration
@inject CallStateContainer CallContainer
@inject AuthenticationStateProvider AuthState
@inject IDialogService DialogService

<PageTitle>InternshipChat.WEB</PageTitle>

<div class="page">
    <AuthorizeView>
        <div class="sidebar">
            <NavMenu />
        </div>
    </AuthorizeView>

    <main>
        <div class="top-row px-4">
            <LoginDisplay />
        </div>

        <article class="content px-4">
            <CascadingValue Value="hubConnection">
                @Body
            </CascadingValue>
        </article>
    </main>
</div>
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    private string CurrentUserName { get; set; }
    private string CallerUserName { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await DefineCurrentUser();
        CallContainer.CallStateChanged += HandleStateChange;

        var url = Configuration["AppBase"] + "chathub";
        hubConnection = new HubConnectionBuilder().WithUrl(url).Build();
        await hubConnection.StartAsync();
        SubscribeOnHubSignals();
    }

    private async void HandleStateChange()
    {
        if (CallContainer.UserCallState == CallState.Outgoing)
        {
            await hubConnection.SendAsync("Call", CurrentUserName, CallContainer.ReceiverUserName);
            CallContainer.ChangeCallState(CallState.InCall);
            OpenCallDialog(IsCallReceiver: false);
        }

        if (CallContainer.UserCallState == CallState.Incoming)
        {
            var parameters = new DialogParameters { ["caller"] = CallerUserName };
            var options = new DialogOptions { DisableBackdropClick = true };
            var dialog = DialogService.Show<CallModal>("Incoming Call", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                CallContainer.ChangeCallState(CallState.InCall);
                OpenCallDialog(IsCallReceiver: true);
            } else
            {
                //CallContainer.ChangeCallState(CallState.None);
                await hubConnection.SendAsync("EndCall");
            }
        }
    }

    private void OpenCallDialog(bool IsCallReceiver)
    {
        var parameters = new DialogParameters { ["receiver"] = "aaa@example.com" };
        var options = new DialogOptions { DisableBackdropClick = true };
        IDialogReference dialog;
        if (IsCallReceiver)
        {
             dialog = DialogService.Show<VideoCall>("In progress", parameters, options);
        } else
        {
             dialog = DialogService.Show<VideoCall>("In progress", options);
        }
    }

    private async Task DefineCurrentUser()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        CurrentUserName = authState.User.Identity!.Name!;
    }

    private async Task OnReceiveCallOffer(string callerUserName, string receiverUserName)
    {
        if (CurrentUserName == receiverUserName)
        {
            CallerUserName = callerUserName;
            CallContainer.ChangeCallState(CallState.Incoming);
            StateHasChanged();
        }
    }

    private void SubscribeOnHubSignals()
    {
        hubConnection.On<string, string>("ReceiveCallOffer", this.OnReceiveCallOffer);
    }
}